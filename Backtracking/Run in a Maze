package Backtracking;
import java.util.*;
public class Runinamaze {
	public static boolean rateinmaze(int maze[][])
	{   
		int n = maze.length;
		int i=0,j=0;
		int path[][] = new int[n][n];
 		return solvemaze(maze,i,j,path);
	}
public static boolean solvemaze(int maze[][],int i,int j,int path[][])
{

	 int n = maze.length;
	if(i < 0 || i > (n-1) || j < 0 || j > (n-1) || maze[i][j] == 0 || path[i][j] ==1)
	{
	   return false;	
	}
	path[i][j]=1;
	if(i == n-1 || j == n-1)
	{
		return true;
	}
	if(solvemaze(maze,i-1,j,path))
	{
		return true;
	}
	if(solvemaze(maze,i,j+1,path))
	{
		return true;
	}
	if(solvemaze(maze,i,j-1,path))
	{
		return true;
	}
	if(solvemaze(maze,i+1,j,path))
	{
		return true;
	}
	return false;
	
}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int maze[][] = {{1,0,0},{1,0,0},{,1,1}};
	    boolean possiblepath = rateinmaze(maze);
	    System.out.println(possiblepath);

	}

}
